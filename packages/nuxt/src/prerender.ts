import type { ProcessedFile } from 'mdream/llms-txt'
import type { Nitro, PrerenderRoute } from 'nitropack'
import type { MdreamLlmsTxtGeneratePayload } from './types.js'
import { writeFile } from 'node:fs/promises'
import { join } from 'node:path'
import { useNuxt } from '@nuxt/kit'
import { consola } from 'consola'
import { generateLlmsTxtArtifacts } from 'mdream/llms-txt'
import { useSiteConfig } from 'nuxt-site-config/kit'

const logger = consola.withTag('nuxt-mdream')

export function setupPrerenderHandler() {
  const nuxt = useNuxt()
  const pages: ProcessedFile[] = []

  nuxt.hooks.hook('nitro:init', async (nitro: Nitro) => {
    nitro.hooks.hook('prerender:generate', async (route) => {
      // Process markdown files generated by our middleware
      if (!route.fileName?.endsWith('.md')) {
        return
      }
      const { markdown, title, description } = JSON.parse(route.contents) as {
        markdown: string
        title: string
        description: string
      }
      // Store page data for llms.txt generation
      const page: ProcessedFile = {
        filePath: route.fileName,
        url: route.route,
        title,
        content: markdown,
        metadata: {
          description,
          title,
        },
      }
      pages.push(page)
      // set page content to the markdown
      route.contents = markdown
    })

    nitro.hooks.hook('prerender:done', async () => {
      if (pages.length === 0) {
        return
      }
      const startTime = Date.now()
      // Try to access site config from Nitro context
      const siteConfig = useSiteConfig()
      // Generate llms.txt artifacts
      const artifacts = await generateLlmsTxtArtifacts({
        origin: siteConfig.url,
        files: pages,
        generateFull: true,
        siteName: siteConfig.name || siteConfig.url,
        description: siteConfig.description,
      })
      logger.success(`Generated markdown for ${pages.length} pages`)

      // Call mdream:llms-txt hook to allow modification
      // Using mutable pattern - hooks modify the payload directly
      const hookPayload: MdreamLlmsTxtGeneratePayload = {
        content: artifacts.llmsTxt || '',
        fullContent: artifacts.llmsFullTxt || '',
        pages,
      }

      await nuxt.hooks.callHook('mdream:llms-txt', hookPayload)

      // Use the potentially modified content from the hook
      const finalLlmsTxt = hookPayload.content
      const finalLlmsFullTxt = hookPayload.fullContent

      const generatedFiles: Array<{ path: string, size: string }> = []

      // Write llms.txt
      if (finalLlmsTxt) {
        const llmsTxtPath = join(nitro.options.output.publicDir, 'llms.txt')
        await writeFile(llmsTxtPath, finalLlmsTxt, 'utf-8')
        const sizeKb = (Buffer.byteLength(finalLlmsTxt, 'utf-8') / 1024).toFixed(2)
        generatedFiles.push({ path: 'llms.txt', size: `${sizeKb}kb` })
        nitro._prerenderedRoutes!.push({
          route: '/llms.txt',
          fileName: llmsTxtPath,
          generateTimeMS: 0,
        } satisfies PrerenderRoute)
      }

      // Write llms-full.txt
      if (finalLlmsFullTxt) {
        const llmsFullTxtPath = join(nitro.options.output.publicDir, 'llms-full.txt')
        await writeFile(llmsFullTxtPath, finalLlmsFullTxt, 'utf-8')
        const sizeKb = (Buffer.byteLength(finalLlmsFullTxt, 'utf-8') / 1024).toFixed(2)
        generatedFiles.push({ path: 'llms-full.txt', size: `${sizeKb}kb` })
        nitro._prerenderedRoutes!.push({
          route: '/llms-full.txt',
          fileName: llmsFullTxtPath,
          generateTimeMS: 0,
        } satisfies PrerenderRoute)
      }

      // Output consolidated message
      if (generatedFiles.length > 0) {
        const elapsed = Date.now() - startTime
        const fileList = generatedFiles.map(f => `${f.path} (${f.size})`).join(' and ')
        logger.info(`Generated ${fileList} in ${elapsed}ms`)
      }
    })
  })
}
